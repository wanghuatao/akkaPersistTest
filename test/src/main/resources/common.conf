db {
  ContactPoints = ["127.0.0.1"]
  dbTag = "test0825a"
}


cassandra-journal {
  contact-points = ${db.ContactPoints}
  read-consistency = "ONE"
  write-consistency = "ONE"
  connections-per-host-core-local = 2
  connections-per-host-core-remote = 2

  keyspace = "upup_akka_"${db.dbTag}
}

cassandra-snapshot-store {
  contact-points = ${db.ContactPoints}
  keyspace = "upup_akka_snapshot_"${db.dbTag}
}

akka.actor.serializers {
  proto = "akka.remote.serialization.ProtobufSerializer"
  kryo = "com.twitter.chill.akka.AkkaSerializer"

  pubsub = "akka.cluster.pubsub.protobuf.DistributedPubSubMessageSerializer"
  ccm = "akka.cluster.client.protobuf.ClusterClientMessageSerializer"
  rms = "akka.cluster.ddata.protobuf.ReplicatorMessageSerializer"
}
akka.actor {
  enable-additional-serialization-bindings = on
  allow-java-serialization = off
}

akka.actor.serialization-bindings {

  //"scala.Product" = kryo
  "java.io.Serializable" = kryo

  //  "com.google.protobuf.GeneratedMessage" = proto
  //  "com.google.protobuf.Message" = proto
  //  "akka.protobuf.GeneratedMessage" = proto
  //  "scalapb.GeneratedMessage" = proto
  //

  "com.msg.Msg" = kryo
  "com.msg.EntityMsg" = kryo


  "akka.cluster.pubsub.DistributedPubSubMediator$Send" = pubsub
  "akka.cluster.client.ClusterReceptionist$Internal$Heartbeat$" = ccm
  "akka.cluster.ddata.Replicator$Internal$DataEnvelope" = rms
  "akka.cluster.client.ClusterReceptionist$Internal$HeartbeatRsp$" = ccm
  "akka.cluster.client.ClusterReceptionist$Internal$GetContacts$" = ccm
  "akka.cluster.client.ClusterReceptionist$Internal$Contacts" = ccm
}

//show someone event  log
eventSource {
  actors = ["buff", "defend", "Player", "DataStatistics"]

  curActor = "Player"

  //playerId = "oGf9_4hFg-woWW0gSMYG20lB47Mk"
  playerId = "a"
}



defaultTag = ${db.dbTag}

